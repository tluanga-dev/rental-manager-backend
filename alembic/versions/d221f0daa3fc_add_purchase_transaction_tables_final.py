"""Add purchase transaction tables final

Revision ID: d221f0daa3fc
Revises: 1bf5fc286e10
Create Date: 2025-06-30 09:53:11.461991

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


revision = 'd221f0daa3fc'
down_revision = '1bf5fc286e10'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create purchasestatus enum only if it doesn't exist
    conn = op.get_bind()
    result = conn.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'purchasestatus'"))
    if not result.fetchone():
        purchase_status_enum = postgresql.ENUM('DRAFT', 'CONFIRMED', 'PROCESSING', 'RECEIVED', 'COMPLETED', 'CANCELLED', name='purchasestatus')
        purchase_status_enum.create(conn)
    
    op.create_table('purchase_transactions',
    sa.Column('transaction_id', sa.String(length=255), nullable=False),
    sa.Column('transaction_date', sa.Date(), nullable=False),
    sa.Column('vendor_id', sa.UUID(), nullable=False),
    sa.Column('status', postgresql.ENUM(name='purchasestatus', create_type=False), nullable=False),
    sa.Column('total_amount', sa.DECIMAL(precision=12, scale=2), nullable=False),
    sa.Column('grand_total', sa.DECIMAL(precision=12, scale=2), nullable=False),
    sa.Column('purchase_order_number', sa.String(length=255), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.CheckConstraint('grand_total >= 0', name='check_positive_grand_total'),
    sa.CheckConstraint('total_amount >= 0', name='check_positive_total_amount'),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_purchase_transactions_date', 'purchase_transactions', ['transaction_date'], unique=False)
    op.create_index(op.f('ix_purchase_transactions_id'), 'purchase_transactions', ['id'], unique=False)
    op.create_index('ix_purchase_transactions_po_number', 'purchase_transactions', ['purchase_order_number'], unique=False)
    op.create_index(op.f('ix_purchase_transactions_purchase_order_number'), 'purchase_transactions', ['purchase_order_number'], unique=False)
    op.create_index('ix_purchase_transactions_status', 'purchase_transactions', ['status'], unique=False)
    op.create_index(op.f('ix_purchase_transactions_transaction_date'), 'purchase_transactions', ['transaction_date'], unique=False)
    op.create_index(op.f('ix_purchase_transactions_transaction_id'), 'purchase_transactions', ['transaction_id'], unique=True)
    op.create_index('ix_purchase_transactions_vendor', 'purchase_transactions', ['vendor_id'], unique=False)
    op.create_table('purchase_transaction_items',
    sa.Column('transaction_id', sa.UUID(), nullable=False),
    sa.Column('inventory_item_id', sa.UUID(), nullable=False),
    sa.Column('warehouse_id', sa.UUID(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('discount', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('tax_amount', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('total_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('serial_number', sa.JSON(), nullable=False),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.Column('warranty_period_type', postgresql.ENUM(name='warrantyperiodtype', create_type=False), nullable=True),
    sa.Column('warranty_period', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.CheckConstraint('(warranty_period_type IS NULL AND warranty_period IS NULL) OR (warranty_period_type IS NOT NULL AND warranty_period IS NOT NULL)', name='check_warranty_consistency'),
    sa.CheckConstraint('discount >= 0', name='check_non_negative_discount'),
    sa.CheckConstraint('quantity > 0', name='check_positive_purchase_quantity'),
    sa.CheckConstraint('tax_amount >= 0', name='check_non_negative_tax_amount'),
    sa.CheckConstraint('total_price >= 0', name='check_non_negative_total_price'),
    sa.CheckConstraint('unit_price >= 0', name='check_non_negative_unit_price'),
    sa.CheckConstraint('warranty_period IS NULL OR warranty_period > 0', name='check_positive_warranty_period'),
    sa.ForeignKeyConstraint(['inventory_item_id'], ['inventory_item_masters.id'], ),
    sa.ForeignKeyConstraint(['transaction_id'], ['purchase_transactions.id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_purchase_transaction_items_id'), 'purchase_transaction_items', ['id'], unique=False)
    op.create_index('ix_purchase_transaction_items_inventory', 'purchase_transaction_items', ['inventory_item_id'], unique=False)
    op.create_index('ix_purchase_transaction_items_transaction', 'purchase_transaction_items', ['transaction_id'], unique=False)
    op.create_index('ix_purchase_transaction_items_warehouse', 'purchase_transaction_items', ['warehouse_id'], unique=False)
    op.drop_constraint('id_managers_prefix_key', 'id_managers', type_='unique')
    op.drop_constraint('inventory_item_masters_name_key', 'inventory_item_masters', type_='unique')
    op.drop_constraint('inventory_item_masters_sku_key', 'inventory_item_masters', type_='unique')
    op.drop_constraint('item_packaging_label_key', 'item_packaging', type_='unique')
    op.drop_constraint('warehouses_label_key', 'warehouses', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint('warehouses_label_key', 'warehouses', ['label'])
    op.create_unique_constraint('item_packaging_label_key', 'item_packaging', ['label'])
    op.create_unique_constraint('inventory_item_masters_sku_key', 'inventory_item_masters', ['sku'])
    op.create_unique_constraint('inventory_item_masters_name_key', 'inventory_item_masters', ['name'])
    op.create_unique_constraint('id_managers_prefix_key', 'id_managers', ['prefix'])
    op.drop_index('ix_purchase_transaction_items_warehouse', table_name='purchase_transaction_items')
    op.drop_index('ix_purchase_transaction_items_transaction', table_name='purchase_transaction_items')
    op.drop_index('ix_purchase_transaction_items_inventory', table_name='purchase_transaction_items')
    op.drop_index(op.f('ix_purchase_transaction_items_id'), table_name='purchase_transaction_items')
    op.drop_table('purchase_transaction_items')
    op.drop_index('ix_purchase_transactions_vendor', table_name='purchase_transactions')
    op.drop_index(op.f('ix_purchase_transactions_transaction_id'), table_name='purchase_transactions')
    op.drop_index(op.f('ix_purchase_transactions_transaction_date'), table_name='purchase_transactions')
    op.drop_index('ix_purchase_transactions_status', table_name='purchase_transactions')
    op.drop_index(op.f('ix_purchase_transactions_purchase_order_number'), table_name='purchase_transactions')
    op.drop_index('ix_purchase_transactions_po_number', table_name='purchase_transactions')
    op.drop_index(op.f('ix_purchase_transactions_id'), table_name='purchase_transactions')
    op.drop_index('ix_purchase_transactions_date', table_name='purchase_transactions')
    op.drop_table('purchase_transactions')
    # ### end Alembic commands ###